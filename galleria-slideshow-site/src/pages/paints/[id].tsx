import Head from "next/head";
import { paints, paintsLength } from "../../data/data";
import { Navbar } from "../../components/Navbar";
import { Modal } from "../../components/Modal";
import { GetStaticPaths, GetStaticProps, InferGetStaticPropsType } from "next";
import { useEffect, useState } from "react";

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const paint = paints.filter((p) => p.id.toString() === params?.id);
  return {
    props: {
      allPaintsData: paint[0],
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  const paths = paints.map((paint) => ({
    params: { id: paint.id.toString() },
  }));
  return { paths, fallback: false };
};

const Paint = ({
  allPaintsData,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  function useWindowSize() {
    // Initialize state with undefined width/height so server and client renders match
    const [windowSize, setWindowSize] = useState({
      width: 0,
      height: 0,
    });

    useEffect(() => {
      // only execute all the code below in client side
      if (typeof window !== "undefined") {
        // Handler to call on window resize
        // @ts-ignore
        function handleResize() {
          // Set window width/height to state
          setWindowSize({
            width: window.innerWidth,
            height: window.innerHeight,
          });
        }

        // Add event listener
        window.addEventListener("resize", handleResize);

        // Call handler right away so state gets updated with initial window size
        handleResize();

        // Remove event listener on cleanup
        return () => window.removeEventListener("resize", handleResize);
      }
    }, []); // Empty array ensures that effect is only run on mount
    return windowSize.width;
  }

  const desiredWidth = Math.ceil(
    (allPaintsData.id / paintsLength) * useWindowSize()
  );

  return (
    <>
      <Head>
        <title>Galleria SlideShow Site</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon-32x32.png" />
      </Head>
      <Navbar />
      <main className="container mt-[24px] mb-[207px] mx-auto md:mt-[40px] md:mb-[0px] flex flex-col items-center md:items-start min-h-screen md:">
        <div className="relative w-[327px] md:w-[475px]">
          <img
            src={
              useWindowSize() > 767
                ? allPaintsData.images.hero.large
                : allPaintsData.images.hero.small
            }
            alt={allPaintsData.name}
          />
          <Modal
            imgSrc={
              useWindowSize() > 767
                ? allPaintsData.images.gallery
                : allPaintsData.images.thumbnail
            }
            imgAlt={allPaintsData.name}
          />
          <div className="absolute bg-blue-400 w-[280px] h-[104px] md:w-[445px] md:h-fit -bottom-[52px] md:-top-[1px] md:-right-[213px] flex flex-col items-start justify-center">
            <div className="ml-[24px] md:ml-[65px]">
              <h2 className="text-[24px] md:text-[56px] leading-[29px] md:leading-[64px] md:w-[360px] font-bold">
                {allPaintsData.name}
              </h2>
              <p className="text-[#7D7D7D] text-[15px] mt-[8px] md:mt-[24px] pb-[43px]">
                {allPaintsData.artist.name}
              </p>
            </div>
          </div>
        </div>
        <div className="relative mt-[98px] w-[327px]">
          <img
            src={allPaintsData.artist.image}
            width="64"
            height="64"
            alt={allPaintsData.artist.name}
            className="absolute -top-[46px] md:-top-[422px] md:-right-[305px] md:w-[128px]"
          />
          <h1 className="absolute -top-[25px] right-[10px] text-[100px] text-[#F3F3F3] -z-10">
            {allPaintsData.year}
          </h1>
          <p className="text-[#7D7D7D] text-[14px] font-bold leading-[28px] mt-[74px] mb-[40px] md:ml-[155px] md:w-[457px] bg-blue-200">
            {allPaintsData.description}
          </p>
          <a
            href={allPaintsData.source}
            target="_blank"
            className=" text-[9px] text-[#7D7D7D] underline self-start tracking-[1.92px]"
          >
            GO TO SOURCE
          </a>
        </div>
      </main>
      {/*BottomBar*/}
      <div className="relative h-[72px] border-t-[1px] border-[#E5E5E5] flex items-center justify-between">
        <div
          className={`absolute top-0 h-[2px] w-[${desiredWidth}px] bg-red-600`}
        ></div>
        <div className="ml-[24px]">
          <p className="text-[14px] leading-[17px]">{allPaintsData.name}</p>
          <p className="text-[10px] mt-[9px]">{allPaintsData.artist.name}</p>
        </div>
        <div className="flex justify-between mr-[24px]">
          <a
            href={`/paints/${
              allPaintsData.id > 1 ? allPaintsData.id - 1 : allPaintsData.id
            }`}
          >
            <img src="/shared/icon-back-button.svg" alt="icon back button" />
          </a>
          <a
            href={`/paints/${
              allPaintsData.id < paintsLength
                ? allPaintsData.id + 1
                : allPaintsData.id
            }`}
          >
            <img
              src="/shared/icon-next-button.svg"
              alt="icon-next-button"
              className="ml-[24px]"
            />
          </a>
        </div>
      </div>
    </>
  );
};

export default Paint;
